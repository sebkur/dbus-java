task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

group = pGroup
version = pVersion

if (project.hasProperty("topobyte")) {
    apply from: 'file:///' + System.getProperty("user.home") \
        + '/.gradle/topobyte.gradle'
}

repositories {
    maven {
        url 'http://mvn.topobyte.de'
    }
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])

    compile 'org.slf4j:slf4j-api:1.6.1'

    runtime 'org.slf4j:slf4j-log4j12:1.6.1'
    runtime 'log4j:log4j:1.2.16'
}

eclipse.classpath.file.withXml { XmlProvider provider ->
    provider.asNode().classpathentry.findAll{it.'@path'.contains('lib/unix-0.5.jar')}
    .each {
        it.appendNode('attributes')
                .appendNode('attribute', [name:'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:'dbus'])
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

task copyJars(type: Copy) {
    into "$buildDir/lib-run"
    from jar
}

task copyDeps(type: Copy) {
    into "$buildDir/lib-run"
    from configurations.runtime
}

task createRuntime(dependsOn: [copyJars, copyDeps]) {
    description 'Setup the execution environment for the main scripts'
}

def pomInfo = new XmlSlurper().parse(new File('info.pom'));

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.project {
                    name pomInfo.name
                    description pomInfo.description
                    url pomInfo.url
                }
            }
        }
    }
}
